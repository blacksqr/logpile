.TH search 1 1.4 "User Commands"
.SH NAME
search \- search a logpile log index
.SH SYNOPSIS
.LP
.nf
\fBsearch\fR [\fB-o\fR \fIoutput format function\fR] [\fB-m\fR \fItimeunit prior (defaults to minutes)\fR] 
	[\fB-r\fR \fIreport template\fR] [\fB-l\fR \fIlog level\fR]  \fB\fIsearch query\fR\fR
.fi
.SH DESCRIPTION
.sp
.LP
The \fBsearch\fR utility searches logpile indexes of log data.
.SH OPTIONS
.sp
.LP
The following options are supported:
.sp
.ne 2
.mk
.na
\fB\fB-o\fR \fIoutput format\fR\fR
.ad
.RS 17n
.rt
The \fIoutput format\fR function to be called to format search results. This function can be a defined on in the logpile library, or a function defined in the config file.
.RE
.sp
.ne 2
.mk
.na
\fB\fB-m\fR \fItimeunit\fR\fR
.ad
.RS 17n
.rt
The \fItimeunit\fR into the past to start the search from (same as PAST: tag). This used to be "minutes in the past" hence -m and defaults to minutes if no unit is specified. Timeunits supported are: (h)our, (m)inute, (s)econds, (Y)ear, (M)onth, (D)ay. eg: -m 1h
.RE
.sp
.ne 2
.mk
.na
\fB\fB-r\fR \fIreport\fR\fR
.ad
.RS 17n
.rt
The \fIreport\fR template to use to format the output of the search. This can be a relative path to the default template dir, or absolute. 
.RE
.sp
.ne 2
.mk
.na
\fB\fB-l\fR \fIlog level\fR\fR
.ad
.RS 17n
.rt
The \fIlog level\fR that will be used for logging. The following levels are available: debug, info, notice, warn, error, critical, alert, emergency.
.RE
.SH OPERANDS
.sp
.ne 2
.mk
.na
\fB\fIsearch query\fR\fR
.ad
.RS 17n
.rt
The \fIsearch query\fR can be a single operand or multiple operands comprising a query. eg: "foo AND bar" or foo AND bar . The syntaix is mostly xapian search syntax with a few extendsions. Here are (most) of the supported search operators:

    daterange: 2009-09-09T00:00..2009-09-10
    host: HOST:hostname
    tag: TAG:snmpd
    past timerange: PAST:1(h|m|s|Y|M|D)
    number of results: RESULTS:<number>
    operators: AND OR NOT XOR NEAR ADJ () 
.RE
.sp
.ne 2
.mk
from xpaian's documentation:
.RE
.sp
.ne 2
.mk
\fBAND\fR
.ad
.RS 17n
.rt
expression \fBAND\fR expression matches documents which are matched by both of the subexpressions.
.RE
.sp
.ne 2
.mk
.na
\fBOR\fR
.ad
.RS 17n
.rt
expression \fBOR\fR expression matches documents which are matched by either of the subexpressions.
.RE
.sp
.ne 2
.mk
.na
\fBNOT\fR
.ad
.RS 17n
.rt
expression \fBNOT\fR expression matches documents which are matched by only the first subexpression. This can also be written as expression \fBAND NOT\fR expression.  
.RE
.sp
.ne 2
.mk
.na
\fBXOR\fR
.ad
.RS 17n
.rt
expression \fBXOR\fR expression matches documents which are matched by one or other of the subexpressions, but not both. \fBXOR\fR is probably a bit esoteric.
.RE
.sp
.ne 2
.mk
.na
Bracketed
.ad
.RS 17n
.rt
You can control the precedence of the boolean operators using brackets. In the query one OR two AND three the AND takes precedence, so this is the same as one OR (two AND three). You can override the precedence using (one OR two) AND three.
.RE
.sp
.ne 2
.mk
.na
\fBNEAR\fR
.ad
.RS 17n
.rt
one \fBNEAR\fR two \fBNEAR\fR three matches documents containing those words within 10 words of each other. You can set the threshold to n by using \fBNEAR\fR/n like so: one \fBNEAR\fR/6 two.
.RE
.sp
.ne 2
.mk
.na
\fBADJ\fR
.ad
.RS 17n
.rt
\fBADJ\fR is like NEAR but only matches if the words appear in the same order as in the query. So one \fBADJ\fR two \fBADJ\fR three matches documents containing those three words in that order and within 10 words of each other. You can set the threshold to n by using \fBADJ\fR/n like so: one \fBADJ\fR/6 two.
.RE
.SH USAGE
.sp
.ne 2
.mk
.na
Search from 2009-09-09 00:00 to 2009-09-10 with a tag of postfix , host of hostname, return 200 results containing "user@example.com"
.sp
search "2009-09-09T00:00..2009-09-10 TAG:postfix HOST:hostname RESULTS:200 user@example.com"
.ad
.RS 17n
.rt
.RE
